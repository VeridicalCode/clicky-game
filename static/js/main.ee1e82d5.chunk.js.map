{"version":3,"sources":["assets/inst-1.jpg","assets/inst-2.jpg","assets/inst-3.jpg","assets/inst-4.jpg","assets/inst-5.jpg","assets/inst-6.jpg","assets/inst-7.jpg","assets/inst-8.jpg","utils/state.js","components/Header/Header.js","utils/clickHelpers.js","utils/imageArray.js","components/Image/Image.js","components/Grid/Grid.js","App.js","index.js"],"names":["module","exports","createGlobalState","score","topScore","GlobalStateProvider","setGlobalState","useGlobalState","HeaderDiv","props","globalScore","globalTopScore","shuffleImages","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","src","require","key","clicked","ImageDiv","value","alt","Grid","useState","imageArray","localArray","setLocalArray","map","imgObj","index","href","onClick","event","preventDefault","currentTarget","getAttribute","alert","tempArray","i","setAllFalse","setTrueAtIndex","Image","App","Header","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee1e82d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/inst-1.d87108f6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/inst-2.e91774bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/inst-3.6507cbae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/inst-4.a106513e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/inst-5.2ea406dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/inst-6.81476073.jpg\";","module.exports = __webpack_public_path__ + \"static/media/inst-7.ae346fd0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/inst-8.3062609d.jpg\";","import { createGlobalState } from 'react-hooks-global-state';\r\n\r\n// first create two global states\r\nconst { GlobalStateProvider, setGlobalState, useGlobalState } = createGlobalState({\r\n  score: 0,\r\n  topScore: 0,\r\n});\r\n\r\n// then export functions to modify them\r\nexport const iterateScore = () => {\r\n  setGlobalState('score', value => value + 1);\r\n};\r\n\r\nexport const zeroScore = () => {\r\n  setGlobalState('score', value => 0);\r\n};\r\n\r\nexport const setTopScore = (topScore) => {\r\n  setGlobalState('topScore', value => topScore);\r\n};\r\n\r\n// need to tell react about the values themselves as well as the functions\r\nexport { GlobalStateProvider, useGlobalState };","// the header will contain the title and instructions\r\n// it will stretch across the whole page & have some treble clefs or something\r\n\r\nimport React from 'react'\r\nimport { useGlobalState } from '../../utils/state';\r\n\r\n// takes a prop - the image source - and makes that a tile\r\n\r\nfunction HeaderDiv(props) {\r\n  const [ globalScore ] = useGlobalState('score');\r\n  const [ globalTopScore ] = useGlobalState('topScore');\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Instrumental Memory!</h1>\r\n      <br />\r\n      <span>Click the images to increase your score, but don't click the same one twice, or you'll lose!</span>\r\n      <span>current score = {globalScore}</span>\r\n      <br/>\r\n      <span>top score = {globalTopScore}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderDiv;","\r\n\r\n// fisher-yates to give a nice random image array\r\nexport const shuffleImages = (array) => {\r\n  let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n};\r\n\r\n// clear all clicked values\r\nexport const setAllFalse = (array) => {\r\n  // guess we'll use a for loop like a savage, since array methods aren't cooperating\r\n  for (let i = 0; i < array.length; i++){\r\n    array[i].clicked = 'false';\r\n  }\r\n}\r\n\r\n// set current to clicked\r\nexport const setTrueAtIndex = (array, index) => {\r\n  array[index].clicked = 'true';\r\n}","\r\nexport default [\r\n  {\r\n    src: require('../assets/inst-1.jpg'),\r\n    key: 1,\r\n    clicked: 'false',\r\n  },\r\n  {\r\n    src: require('../assets/inst-2.jpg'),\r\n    key: 2,\r\n    clicked: 'false',\r\n  },\r\n  {\r\n    src: require('../assets/inst-3.jpg'),\r\n    key: 3,\r\n    clicked: 'false',\r\n  },\r\n  {\r\n    src: require('../assets/inst-4.jpg'),\r\n    key: 4,\r\n    clicked: 'false',\r\n  },\r\n  {\r\n    src: require('../assets/inst-5.jpg'),\r\n    key: 5,\r\n    clicked: 'false',\r\n  },\r\n  {\r\n    src: require('../assets/inst-6.jpg'),\r\n    key: 6,\r\n    clicked: 'false',\r\n  },\r\n  {\r\n    src: require('../assets/inst-7.jpg'),\r\n    key: 7,\r\n    clicked: 'false',\r\n  },\r\n  {\r\n    src: require('../assets/inst-8.jpg'),\r\n    key: 8,\r\n    clicked: 'false',\r\n  },\r\n]","import React from 'react'\r\nimport './image.css'\r\n\r\n\r\n// imageArray is a state held by the Grid container div. each object in it has an image source and a \"clicked\" value.\r\n// we pass those in as props and check against them on click.\r\n\r\nfunction ImageDiv(props) {\r\n\r\n  return (\r\n    <img\r\n      value={props.value}\r\n      src={props.src}\r\n      alt={props.alt}\r\n      clicked={props.clicked}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ImageDiv;","import React, { useState } from 'react';\r\nimport { iterateScore, zeroScore, setTopScore, useGlobalState } from '../../utils/state';\r\nimport { shuffleImages, setAllFalse, setTrueAtIndex } from '../../utils/clickHelpers';\r\nimport imageArray from '../../utils/imageArray';\r\nimport Image from '../Image/Image';\r\n\r\nfunction Grid() {\r\n  const [ globalScore ] = useGlobalState('score');\r\n  const [ globalTopScore ] = useGlobalState('topScore');\r\n  const [ localArray, setLocalArray ] = useState(imageArray);\r\n\r\n  return (\r\n    <div>\r\n      <span>current score = {globalScore}</span>\r\n      <br/>\r\n      <span>top score = {globalTopScore}</span>\r\n      <div >\r\n        {localArray.map((imgObj, index) => {\r\n          return (\r\n            <a\r\n              value={index}\r\n              href='./'\r\n              clicked={imgObj.clicked}\r\n              onClick={event => {\r\n                event.preventDefault();\r\n                if (event.currentTarget.getAttribute('clicked')==='true') {\r\n                  alert(`You already clicked that instrument. Resetting game.`);\r\n                  // if current score is new best, update topScore global\r\n                  if (globalScore > globalTopScore) {\r\n                    setTopScore(globalScore);\r\n                  }\r\n                  // can't directly alter state, so make a temp array to mess with\r\n                  let tempArray = localArray;\r\n                  // use helpers to clear all the 'clicked' values and shuffle\r\n                  setAllFalse(tempArray);\r\n                  shuffleImages(tempArray);\r\n                  // save the temp array back to the state & zero out the score\r\n                  setLocalArray(tempArray);\r\n                  zeroScore();\r\n                }\r\n                else {\r\n                  // can't directly alter state, so make a temp array to mess with\r\n                  let tempArray = localArray;\r\n                  // ask the image what its index in the array is, use helper to set that to true\r\n                  const newIndex = event.currentTarget.getAttribute('value');\r\n                  setTrueAtIndex(tempArray, newIndex);\r\n                  // shuffle, then save modified array to state\r\n                  shuffleImages(tempArray);\r\n                  setLocalArray(tempArray);\r\n                  // finally, increase the global score tracker\r\n                  iterateScore();\r\n                }\r\n              }}\r\n            >\r\n              <Image\r\n                src={imgObj.src}\r\n              />\r\n            </a>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid;","import React from 'react';\nimport { GlobalStateProvider } from './utils/state';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Grid from './components/Grid/Grid';\n\nfunction App() {\n  return (\n    <GlobalStateProvider>\n      <Header>A header</Header>\n      <Grid>the grid component will shuffle itself</Grid>\n    </ GlobalStateProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}